server:
  port: 3000

logging:
  level:
    root: info
    org:
      springframework:
        cloud:
          netflix: debug
    com:
      netflix: debug

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false

eureka:
  # dashboard에 대한 설정으로, http://localhost:3000/eureka-ui 를 통해 확인할 수 있다.
  dashboard:
    path: /eureka-ui
  instance:
    hostname: localhost
    statusPageUrlPath: /actuator/info
    healthCheckUrlPath: /actuator/health
  # 등록된 인스턴스 중 많은 수가 정해진 시간 내에 Heatbeat를 보내지 않으면 Eureka는 이를 인스턴스 문제가 아닌
  # 네트워크 문제라고 간주하고 Registry를 그대로 유지한다. Example 실행을 위해 false로 설정
  server:
    enableSelfPreservation: false
    # response cache
    responseCacheUpdateIntervalMs: 30000
  client:
    # Eureka client -> Eureka server로 등록 여부
    # standalone mode이므로 자기 자신을 등록할 필요가 없다.
    registerWithEureka: false
    # Eureka Client -> Eureka server로 Registry fetch 여부
    fetchRegistry: false
    #serviceUrl:
      #defaultZone: http://localhost:3000/eureka/

info:
  app:
    name: Account Example Application
    version: 1.0.0
    discription: This is a demo project for eurkea

---

spring:
  profiles: peer-1
  application:
    name: eureka-server-clustered
server:
  port: 3001
eureka:
  instance:
    hostname: peer-1-server.com
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:3002/eureka/,http://localhost:3003/eureka/

---

spring:
  profiles: peer-2
  application:
    name: eureka-server-clustered
server:
  port: 3002
eureka:
  instance:
    hostname: peer-2-server.com
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:3001/eureka/,http://localhost:3003/eureka/

---

spring:
  profiles: peer-3
  application:
    name: eureka-server-clustered
server:
  port: 3003
eureka:
  instance:
    hostname: peer-3-server.com
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:3001/eureka/,http://localhost:3002/eureka/

